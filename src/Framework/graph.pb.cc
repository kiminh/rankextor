// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Framework/graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Framework/graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rank {
namespace graph {

namespace {

const ::google::protobuf::Descriptor* Condition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Condition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Feature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feature_reflection_ = NULL;
const ::google::protobuf::Descriptor* Feature_kvstore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feature_kvstore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Feature_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Extractor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Extractor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Model_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Model_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Model_Role_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Strategy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Strategy_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelGroup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Framework_2fgraph_2eproto() {
  protobuf_AddDesc_Framework_2fgraph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Framework/graph.proto");
  GOOGLE_CHECK(file != NULL);
  Condition_descriptor_ = file->message_type(0);
  static const int Condition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, name_),
  };
  Condition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Condition_descriptor_,
      Condition::default_instance_,
      Condition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Condition));
  Feature_descriptor_ = file->message_type(1);
  static const int Feature_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, comment_),
  };
  Feature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Feature_descriptor_,
      Feature::default_instance_,
      Feature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Feature));
  Feature_kvstore_descriptor_ = Feature_descriptor_->nested_type(0);
  static const int Feature_kvstore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature_kvstore, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature_kvstore, value_),
  };
  Feature_kvstore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Feature_kvstore_descriptor_,
      Feature_kvstore::default_instance_,
      Feature_kvstore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature_kvstore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feature_kvstore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Feature_kvstore));
  Feature_Type_descriptor_ = Feature_descriptor_->enum_type(0);
  Extractor_descriptor_ = file->message_type(2);
  static const int Extractor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extractor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extractor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extractor, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extractor, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extractor, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extractor, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extractor, comment_),
  };
  Extractor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Extractor_descriptor_,
      Extractor::default_instance_,
      Extractor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extractor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extractor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Extractor));
  Model_descriptor_ = file->message_type(3);
  static const int Model_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, model_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, map_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, formula_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, sample_ratio_),
  };
  Model_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Model_descriptor_,
      Model::default_instance_,
      Model_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Model));
  Model_Role_descriptor_ = Model_descriptor_->enum_type(0);
  Strategy_descriptor_ = file->message_type(4);
  static const int Strategy_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, classtype_),
  };
  Strategy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Strategy_descriptor_,
      Strategy::default_instance_,
      Strategy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Strategy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Strategy));
  ModelGroup_descriptor_ = file->message_type(5);
  static const int ModelGroup_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, extractor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, strategy_),
  };
  ModelGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelGroup_descriptor_,
      ModelGroup::default_instance_,
      ModelGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelGroup));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Framework_2fgraph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Condition_descriptor_, &Condition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Feature_descriptor_, &Feature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Feature_kvstore_descriptor_, &Feature_kvstore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Extractor_descriptor_, &Extractor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Model_descriptor_, &Model::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Strategy_descriptor_, &Strategy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelGroup_descriptor_, &ModelGroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Framework_2fgraph_2eproto() {
  delete Condition::default_instance_;
  delete Condition_reflection_;
  delete Condition::_default_name_;
  delete Feature::default_instance_;
  delete Feature_reflection_;
  delete Feature::_default_name_;
  delete Feature::_default_group_;
  delete Feature_kvstore::default_instance_;
  delete Feature_kvstore_reflection_;
  delete Feature_kvstore::_default_key_;
  delete Extractor::default_instance_;
  delete Extractor_reflection_;
  delete Extractor::_default_name_;
  delete Extractor::_default_type_;
  delete Extractor::_default_top_;
  delete Extractor::_default_config_;
  delete Model::default_instance_;
  delete Model_reflection_;
  delete Model::_default_name_;
  delete Model::_default_type_;
  delete Model::_default_top_;
  delete Strategy::default_instance_;
  delete Strategy_reflection_;
  delete Strategy::_default_name_;
  delete ModelGroup::default_instance_;
  delete ModelGroup_reflection_;
  delete ModelGroup::_default_name_;
}

void protobuf_AddDesc_Framework_2fgraph_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025Framework/graph.proto\022\nrank.graph\"\037\n\tC"
    "ondition\022\022\n\004name\030\001 \002(\t:\004null\"\217\002\n\007Feature"
    "\022\022\n\004name\030\001 \002(\t:\004null\022)\n\004data\030\002 \003(\0132\033.ran"
    "k.graph.Feature.kvstore\022,\n\004type\030\003 \001(\0162\030."
    "rank.graph.Feature.Type:\004FILE\022\021\n\tconditi"
    "on\030\004 \001(\t\022\024\n\005group\030\005 \001(\t:\005begin\022\016\n\006config"
    "\030\006 \001(\t\022\017\n\007comment\030\007 \001(\t\0320\n\007kvstore\022\024\n\003ke"
    "y\030\001 \002(\t:\007default\022\017\n\005value\030\002 \002(\t:\000\"\033\n\004Typ"
    "e\022\010\n\004FILE\020\000\022\t\n\005REDIS\020\001\"\220\001\n\tExtractor\022\022\n\004"
    "name\030\001 \002(\t:\004xfea\022\022\n\004type\030\002 \002(\t:\004xfea\022\016\n\006"
    "bottom\030\003 \003(\t\022\021\n\003top\030\004 \002(\t:\004xfea\022\024\n\006confi"
    "g\030\005 \002(\t:\004null\022\021\n\tcondition\030\006 \001(\t\022\017\n\007comm"
    "ent\030\007 \001(\t\"\276\002\n\005Model\022\020\n\004name\030\001 \002(\t:\002lr\022\020\n"
    "\004type\030\002 \002(\t:\002lr\022\016\n\006bottom\030\003 \003(\t\022\020\n\003top\030\004"
    " \002(\t:\003end\022\022\n\nmodel_file\030\005 \001(\t\022\020\n\010map_fil"
    "e\030\006 \001(\t\022\021\n\006weight\030\007 \001(\002:\0011\022\021\n\006offset\030\010 \001"
    "(\r:\0010\022/\n\004role\030\t \001(\0162\026.rank.graph.Model.R"
    "ole:\tPREDICTOR\022\021\n\tcondition\030\n \001(\t\022\020\n\010fea"
    "tures\030\013 \001(\t\022\017\n\007formula\030\014 \001(\t\022\024\n\014sample_r"
    "atio\030\r \001(\002\"&\n\004Role\022\r\n\tPREDICTOR\020\000\022\017\n\013TRA"
    "NSFORMER\020\001\"~\n\010Strategy\022\022\n\004name\030\001 \002(\t:\004nu"
    "ll\022\r\n\005order\030\002 \002(\005\022\013\n\003ids\030\003 \001(\t\022\014\n\004desc\030\004"
    " \001(\t\022\016\n\006config\030\005 \001(\t\022\021\n\tcondition\030\006 \001(\t\022"
    "\021\n\tclasstype\030\007 \001(\t\"\344\001\n\nModelGroup\022\022\n\004nam"
    "e\030\001 \002(\t:\004root\022(\n\tcondition\030\002 \003(\0132\025.rank."
    "graph.Condition\022$\n\007feature\030\003 \003(\0132\023.rank."
    "graph.Feature\022(\n\textractor\030\004 \003(\0132\025.rank."
    "graph.Extractor\022 \n\005model\030\005 \003(\0132\021.rank.gr"
    "aph.Model\022&\n\010strategy\030\006 \003(\0132\024.rank.graph"
    ".Strategy", 1169);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Framework/graph.proto", &protobuf_RegisterTypes);
  Condition::_default_name_ =
      new ::std::string("null", 4);
  Condition::default_instance_ = new Condition();
  Feature::_default_name_ =
      new ::std::string("null", 4);
  Feature::_default_group_ =
      new ::std::string("begin", 5);
  Feature::default_instance_ = new Feature();
  Feature_kvstore::_default_key_ =
      new ::std::string("default", 7);
  Feature_kvstore::default_instance_ = new Feature_kvstore();
  Extractor::_default_name_ =
      new ::std::string("xfea", 4);
  Extractor::_default_type_ =
      new ::std::string("xfea", 4);
  Extractor::_default_top_ =
      new ::std::string("xfea", 4);
  Extractor::_default_config_ =
      new ::std::string("null", 4);
  Extractor::default_instance_ = new Extractor();
  Model::_default_name_ =
      new ::std::string("lr", 2);
  Model::_default_type_ =
      new ::std::string("lr", 2);
  Model::_default_top_ =
      new ::std::string("end", 3);
  Model::default_instance_ = new Model();
  Strategy::_default_name_ =
      new ::std::string("null", 4);
  Strategy::default_instance_ = new Strategy();
  ModelGroup::_default_name_ =
      new ::std::string("root", 4);
  ModelGroup::default_instance_ = new ModelGroup();
  Condition::default_instance_->InitAsDefaultInstance();
  Feature::default_instance_->InitAsDefaultInstance();
  Feature_kvstore::default_instance_->InitAsDefaultInstance();
  Extractor::default_instance_->InitAsDefaultInstance();
  Model::default_instance_->InitAsDefaultInstance();
  Strategy::default_instance_->InitAsDefaultInstance();
  ModelGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Framework_2fgraph_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Framework_2fgraph_2eproto {
  StaticDescriptorInitializer_Framework_2fgraph_2eproto() {
    protobuf_AddDesc_Framework_2fgraph_2eproto();
  }
} static_descriptor_initializer_Framework_2fgraph_2eproto_;

// ===================================================================

::std::string* Condition::_default_name_ = NULL;
#ifndef _MSC_VER
const int Condition::kNameFieldNumber;
#endif  // !_MSC_VER

Condition::Condition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Condition::InitAsDefaultInstance() {
}

Condition::Condition(const Condition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Condition::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Condition::~Condition() {
  SharedDtor();
}

void Condition::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Condition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Condition_descriptor_;
}

const Condition& Condition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2fgraph_2eproto();
  return *default_instance_;
}

Condition* Condition::default_instance_ = NULL;

Condition* Condition::New() const {
  return new Condition;
}

void Condition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "null"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "null"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Condition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "null"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Condition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "null"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Condition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Condition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Condition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Condition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Condition::Swap(Condition* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Condition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Condition_descriptor_;
  metadata.reflection = Condition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Feature_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feature_Type_descriptor_;
}
bool Feature_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Feature_Type Feature::FILE;
const Feature_Type Feature::REDIS;
const Feature_Type Feature::Type_MIN;
const Feature_Type Feature::Type_MAX;
const int Feature::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* Feature_kvstore::_default_key_ = NULL;
#ifndef _MSC_VER
const int Feature_kvstore::kKeyFieldNumber;
const int Feature_kvstore::kValueFieldNumber;
#endif  // !_MSC_VER

Feature_kvstore::Feature_kvstore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Feature_kvstore::InitAsDefaultInstance() {
}

Feature_kvstore::Feature_kvstore(const Feature_kvstore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Feature_kvstore::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(_default_key_);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Feature_kvstore::~Feature_kvstore() {
  SharedDtor();
}

void Feature_kvstore::SharedDtor() {
  if (key_ != _default_key_) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Feature_kvstore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feature_kvstore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feature_kvstore_descriptor_;
}

const Feature_kvstore& Feature_kvstore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2fgraph_2eproto();
  return *default_instance_;
}

Feature_kvstore* Feature_kvstore::default_instance_ = NULL;

Feature_kvstore* Feature_kvstore::New() const {
  return new Feature_kvstore;
}

void Feature_kvstore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != _default_key_) {
        key_->assign(*_default_key_);
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Feature_kvstore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1 [default = "default"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Feature_kvstore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1 [default = "default"];
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2 [default = ""];
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Feature_kvstore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1 [default = "default"];
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2 [default = ""];
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Feature_kvstore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1 [default = "default"];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2 [default = ""];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature_kvstore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Feature_kvstore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Feature_kvstore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Feature_kvstore::MergeFrom(const Feature_kvstore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Feature_kvstore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature_kvstore::CopyFrom(const Feature_kvstore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature_kvstore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Feature_kvstore::Swap(Feature_kvstore* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Feature_kvstore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feature_kvstore_descriptor_;
  metadata.reflection = Feature_kvstore_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Feature::_default_name_ = NULL;
::std::string* Feature::_default_group_ = NULL;
#ifndef _MSC_VER
const int Feature::kNameFieldNumber;
const int Feature::kDataFieldNumber;
const int Feature::kTypeFieldNumber;
const int Feature::kConditionFieldNumber;
const int Feature::kGroupFieldNumber;
const int Feature::kConfigFieldNumber;
const int Feature::kCommentFieldNumber;
#endif  // !_MSC_VER

Feature::Feature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Feature::InitAsDefaultInstance() {
}

Feature::Feature(const Feature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Feature::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  type_ = 0;
  condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_ = const_cast< ::std::string*>(_default_group_);
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Feature::~Feature() {
  SharedDtor();
}

void Feature::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (condition_ != &::google::protobuf::internal::kEmptyString) {
    delete condition_;
  }
  if (group_ != _default_group_) {
    delete group_;
  }
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void Feature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feature_descriptor_;
}

const Feature& Feature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2fgraph_2eproto();
  return *default_instance_;
}

Feature* Feature::default_instance_ = NULL;

Feature* Feature::New() const {
  return new Feature;
}

void Feature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    type_ = 0;
    if (has_condition()) {
      if (condition_ != &::google::protobuf::internal::kEmptyString) {
        condition_->clear();
      }
    }
    if (has_group()) {
      if (group_ != _default_group_) {
        group_->assign(*_default_group_);
      }
    }
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "null"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .rank.graph.Feature.kvstore data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .rank.graph.Feature.Type type = 3 [default = FILE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rank::graph::Feature_Type_IsValid(value)) {
            set_type(static_cast< ::rank::graph::Feature_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_condition;
        break;
      }

      // optional string condition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->condition().data(), this->condition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_group;
        break;
      }

      // optional string group = 5 [default = "begin"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_config;
        break;
      }

      // optional string config = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_comment;
        break;
      }

      // optional string comment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "null"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .rank.graph.Feature.kvstore data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // optional .rank.graph.Feature.Type type = 3 [default = FILE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string condition = 4;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->condition(), output);
  }

  // optional string group = 5 [default = "begin"];
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->group(), output);
  }

  // optional string config = 6;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->config(), output);
  }

  // optional string comment = 7;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Feature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "null"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .rank.graph.Feature.kvstore data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // optional .rank.graph.Feature.Type type = 3 [default = FILE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string condition = 4;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->condition(), target);
  }

  // optional string group = 5 [default = "begin"];
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->group(), target);
  }

  // optional string config = 6;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->config(), target);
  }

  // optional string comment = 7;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Feature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "null"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .rank.graph.Feature.Type type = 3 [default = FILE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string condition = 4;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->condition());
    }

    // optional string group = 5 [default = "begin"];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }

    // optional string config = 6;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

    // optional string comment = 7;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  // repeated .rank.graph.Feature.kvstore data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Feature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Feature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void Feature::Swap(Feature* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    data_.Swap(&other->data_);
    std::swap(type_, other->type_);
    std::swap(condition_, other->condition_);
    std::swap(group_, other->group_);
    std::swap(config_, other->config_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feature_descriptor_;
  metadata.reflection = Feature_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Extractor::_default_name_ = NULL;
::std::string* Extractor::_default_type_ = NULL;
::std::string* Extractor::_default_top_ = NULL;
::std::string* Extractor::_default_config_ = NULL;
#ifndef _MSC_VER
const int Extractor::kNameFieldNumber;
const int Extractor::kTypeFieldNumber;
const int Extractor::kBottomFieldNumber;
const int Extractor::kTopFieldNumber;
const int Extractor::kConfigFieldNumber;
const int Extractor::kConditionFieldNumber;
const int Extractor::kCommentFieldNumber;
#endif  // !_MSC_VER

Extractor::Extractor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Extractor::InitAsDefaultInstance() {
}

Extractor::Extractor(const Extractor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Extractor::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  type_ = const_cast< ::std::string*>(_default_type_);
  top_ = const_cast< ::std::string*>(_default_top_);
  config_ = const_cast< ::std::string*>(_default_config_);
  condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Extractor::~Extractor() {
  SharedDtor();
}

void Extractor::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (type_ != _default_type_) {
    delete type_;
  }
  if (top_ != _default_top_) {
    delete top_;
  }
  if (config_ != _default_config_) {
    delete config_;
  }
  if (condition_ != &::google::protobuf::internal::kEmptyString) {
    delete condition_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void Extractor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Extractor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Extractor_descriptor_;
}

const Extractor& Extractor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2fgraph_2eproto();
  return *default_instance_;
}

Extractor* Extractor::default_instance_ = NULL;

Extractor* Extractor::New() const {
  return new Extractor;
}

void Extractor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_type()) {
      if (type_ != _default_type_) {
        type_->assign(*_default_type_);
      }
    }
    if (has_top()) {
      if (top_ != _default_top_) {
        top_->assign(*_default_top_);
      }
    }
    if (has_config()) {
      if (config_ != _default_config_) {
        config_->assign(*_default_config_);
      }
    }
    if (has_condition()) {
      if (condition_ != &::google::protobuf::internal::kEmptyString) {
        condition_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  bottom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Extractor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "xfea"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2 [default = "xfea"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        break;
      }

      // repeated string bottom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        if (input->ExpectTag(34)) goto parse_top;
        break;
      }

      // required string top = 4 [default = "xfea"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->top().data(), this->top().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_config;
        break;
      }

      // required string config = 5 [default = "null"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_condition;
        break;
      }

      // optional string condition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->condition().data(), this->condition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_comment;
        break;
      }

      // optional string comment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Extractor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "xfea"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string type = 2 [default = "xfea"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->bottom(i).data(), this->bottom(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bottom(i), output);
  }

  // required string top = 4 [default = "xfea"];
  if (has_top()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->top().data(), this->top().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->top(), output);
  }

  // required string config = 5 [default = "null"];
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->config(), output);
  }

  // optional string condition = 6;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->condition(), output);
  }

  // optional string comment = 7;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Extractor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "xfea"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2 [default = "xfea"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->bottom(i), target);
  }

  // required string top = 4 [default = "xfea"];
  if (has_top()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->top().data(), this->top().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->top(), target);
  }

  // required string config = 5 [default = "null"];
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->config(), target);
  }

  // optional string condition = 6;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->condition(), target);
  }

  // optional string comment = 7;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Extractor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "xfea"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 2 [default = "xfea"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string top = 4 [default = "xfea"];
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->top());
    }

    // required string config = 5 [default = "null"];
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

    // optional string condition = 6;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->condition());
    }

    // optional string comment = 7;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  // repeated string bottom = 3;
  total_size += 1 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extractor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Extractor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Extractor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Extractor::MergeFrom(const Extractor& from) {
  GOOGLE_CHECK_NE(&from, this);
  bottom_.MergeFrom(from.bottom_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Extractor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extractor::CopyFrom(const Extractor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extractor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void Extractor::Swap(Extractor* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    bottom_.Swap(&other->bottom_);
    std::swap(top_, other->top_);
    std::swap(config_, other->config_);
    std::swap(condition_, other->condition_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Extractor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Extractor_descriptor_;
  metadata.reflection = Extractor_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Model_Role_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Model_Role_descriptor_;
}
bool Model_Role_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Model_Role Model::PREDICTOR;
const Model_Role Model::TRANSFORMER;
const Model_Role Model::Role_MIN;
const Model_Role Model::Role_MAX;
const int Model::Role_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* Model::_default_name_ = NULL;
::std::string* Model::_default_type_ = NULL;
::std::string* Model::_default_top_ = NULL;
#ifndef _MSC_VER
const int Model::kNameFieldNumber;
const int Model::kTypeFieldNumber;
const int Model::kBottomFieldNumber;
const int Model::kTopFieldNumber;
const int Model::kModelFileFieldNumber;
const int Model::kMapFileFieldNumber;
const int Model::kWeightFieldNumber;
const int Model::kOffsetFieldNumber;
const int Model::kRoleFieldNumber;
const int Model::kConditionFieldNumber;
const int Model::kFeaturesFieldNumber;
const int Model::kFormulaFieldNumber;
const int Model::kSampleRatioFieldNumber;
#endif  // !_MSC_VER

Model::Model()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Model::InitAsDefaultInstance() {
}

Model::Model(const Model& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Model::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  type_ = const_cast< ::std::string*>(_default_type_);
  top_ = const_cast< ::std::string*>(_default_top_);
  model_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weight_ = 1;
  offset_ = 0u;
  role_ = 0;
  condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  formula_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sample_ratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Model::~Model() {
  SharedDtor();
}

void Model::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (type_ != _default_type_) {
    delete type_;
  }
  if (top_ != _default_top_) {
    delete top_;
  }
  if (model_file_ != &::google::protobuf::internal::kEmptyString) {
    delete model_file_;
  }
  if (map_file_ != &::google::protobuf::internal::kEmptyString) {
    delete map_file_;
  }
  if (condition_ != &::google::protobuf::internal::kEmptyString) {
    delete condition_;
  }
  if (features_ != &::google::protobuf::internal::kEmptyString) {
    delete features_;
  }
  if (formula_ != &::google::protobuf::internal::kEmptyString) {
    delete formula_;
  }
  if (this != default_instance_) {
  }
}

void Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Model_descriptor_;
}

const Model& Model::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2fgraph_2eproto();
  return *default_instance_;
}

Model* Model::default_instance_ = NULL;

Model* Model::New() const {
  return new Model;
}

void Model::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_type()) {
      if (type_ != _default_type_) {
        type_->assign(*_default_type_);
      }
    }
    if (has_top()) {
      if (top_ != _default_top_) {
        top_->assign(*_default_top_);
      }
    }
    if (has_model_file()) {
      if (model_file_ != &::google::protobuf::internal::kEmptyString) {
        model_file_->clear();
      }
    }
    if (has_map_file()) {
      if (map_file_ != &::google::protobuf::internal::kEmptyString) {
        map_file_->clear();
      }
    }
    weight_ = 1;
    offset_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    role_ = 0;
    if (has_condition()) {
      if (condition_ != &::google::protobuf::internal::kEmptyString) {
        condition_->clear();
      }
    }
    if (has_features()) {
      if (features_ != &::google::protobuf::internal::kEmptyString) {
        features_->clear();
      }
    }
    if (has_formula()) {
      if (formula_ != &::google::protobuf::internal::kEmptyString) {
        formula_->clear();
      }
    }
    sample_ratio_ = 0;
  }
  bottom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "lr"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2 [default = "lr"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        break;
      }

      // repeated string bottom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bottom(this->bottom_size() - 1).data(),
            this->bottom(this->bottom_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bottom;
        if (input->ExpectTag(34)) goto parse_top;
        break;
      }

      // required string top = 4 [default = "end"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->top().data(), this->top().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_model_file;
        break;
      }

      // optional string model_file = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_file().data(), this->model_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_map_file;
        break;
      }

      // optional string map_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map_file().data(), this->map_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_weight;
        break;
      }

      // optional float weight = 7 [default = 1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_role;
        break;
      }

      // optional .rank.graph.Model.Role role = 9 [default = PREDICTOR];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rank::graph::Model_Role_IsValid(value)) {
            set_role(static_cast< ::rank::graph::Model_Role >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_condition;
        break;
      }

      // optional string condition = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->condition().data(), this->condition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_features;
        break;
      }

      // optional string features = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->features().data(), this->features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_formula;
        break;
      }

      // optional string formula = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formula:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_formula()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->formula().data(), this->formula().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_sample_ratio;
        break;
      }

      // optional float sample_ratio = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sample_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sample_ratio_)));
          set_has_sample_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "lr"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string type = 2 [default = "lr"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->bottom(i).data(), this->bottom(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bottom(i), output);
  }

  // required string top = 4 [default = "end"];
  if (has_top()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->top().data(), this->top().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->top(), output);
  }

  // optional string model_file = 5;
  if (has_model_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_file().data(), this->model_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->model_file(), output);
  }

  // optional string map_file = 6;
  if (has_map_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map_file().data(), this->map_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->map_file(), output);
  }

  // optional float weight = 7 [default = 1];
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->weight(), output);
  }

  // optional uint32 offset = 8 [default = 0];
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->offset(), output);
  }

  // optional .rank.graph.Model.Role role = 9 [default = PREDICTOR];
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->role(), output);
  }

  // optional string condition = 10;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->condition(), output);
  }

  // optional string features = 11;
  if (has_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->features(), output);
  }

  // optional string formula = 12;
  if (has_formula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formula().data(), this->formula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->formula(), output);
  }

  // optional float sample_ratio = 13;
  if (has_sample_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->sample_ratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Model::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "lr"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string type = 2 [default = "lr"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string bottom = 3;
  for (int i = 0; i < this->bottom_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bottom(i).data(), this->bottom(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->bottom(i), target);
  }

  // required string top = 4 [default = "end"];
  if (has_top()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->top().data(), this->top().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->top(), target);
  }

  // optional string model_file = 5;
  if (has_model_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_file().data(), this->model_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->model_file(), target);
  }

  // optional string map_file = 6;
  if (has_map_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map_file().data(), this->map_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->map_file(), target);
  }

  // optional float weight = 7 [default = 1];
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->weight(), target);
  }

  // optional uint32 offset = 8 [default = 0];
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->offset(), target);
  }

  // optional .rank.graph.Model.Role role = 9 [default = PREDICTOR];
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->role(), target);
  }

  // optional string condition = 10;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->condition(), target);
  }

  // optional string features = 11;
  if (has_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->features().data(), this->features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->features(), target);
  }

  // optional string formula = 12;
  if (has_formula()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formula().data(), this->formula().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->formula(), target);
  }

  // optional float sample_ratio = 13;
  if (has_sample_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->sample_ratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Model::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "lr"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 2 [default = "lr"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string top = 4 [default = "end"];
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->top());
    }

    // optional string model_file = 5;
    if (has_model_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_file());
    }

    // optional string map_file = 6;
    if (has_map_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_file());
    }

    // optional float weight = 7 [default = 1];
    if (has_weight()) {
      total_size += 1 + 4;
    }

    // optional uint32 offset = 8 [default = 0];
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .rank.graph.Model.Role role = 9 [default = PREDICTOR];
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }

    // optional string condition = 10;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->condition());
    }

    // optional string features = 11;
    if (has_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->features());
    }

    // optional string formula = 12;
    if (has_formula()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->formula());
    }

    // optional float sample_ratio = 13;
    if (has_sample_ratio()) {
      total_size += 1 + 4;
    }

  }
  // repeated string bottom = 3;
  total_size += 1 * this->bottom_size();
  for (int i = 0; i < this->bottom_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bottom(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Model* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Model*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
  GOOGLE_CHECK_NE(&from, this);
  bottom_.MergeFrom(from.bottom_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_model_file()) {
      set_model_file(from.model_file());
    }
    if (from.has_map_file()) {
      set_map_file(from.map_file());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_features()) {
      set_features(from.features());
    }
    if (from.has_formula()) {
      set_formula(from.formula());
    }
    if (from.has_sample_ratio()) {
      set_sample_ratio(from.sample_ratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void Model::Swap(Model* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    bottom_.Swap(&other->bottom_);
    std::swap(top_, other->top_);
    std::swap(model_file_, other->model_file_);
    std::swap(map_file_, other->map_file_);
    std::swap(weight_, other->weight_);
    std::swap(offset_, other->offset_);
    std::swap(role_, other->role_);
    std::swap(condition_, other->condition_);
    std::swap(features_, other->features_);
    std::swap(formula_, other->formula_);
    std::swap(sample_ratio_, other->sample_ratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Model_descriptor_;
  metadata.reflection = Model_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Strategy::_default_name_ = NULL;
#ifndef _MSC_VER
const int Strategy::kNameFieldNumber;
const int Strategy::kOrderFieldNumber;
const int Strategy::kIdsFieldNumber;
const int Strategy::kDescFieldNumber;
const int Strategy::kConfigFieldNumber;
const int Strategy::kConditionFieldNumber;
const int Strategy::kClasstypeFieldNumber;
#endif  // !_MSC_VER

Strategy::Strategy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Strategy::InitAsDefaultInstance() {
}

Strategy::Strategy(const Strategy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Strategy::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  order_ = 0;
  ids_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Strategy::~Strategy() {
  SharedDtor();
}

void Strategy::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (ids_ != &::google::protobuf::internal::kEmptyString) {
    delete ids_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (condition_ != &::google::protobuf::internal::kEmptyString) {
    delete condition_;
  }
  if (classtype_ != &::google::protobuf::internal::kEmptyString) {
    delete classtype_;
  }
  if (this != default_instance_) {
  }
}

void Strategy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Strategy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Strategy_descriptor_;
}

const Strategy& Strategy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2fgraph_2eproto();
  return *default_instance_;
}

Strategy* Strategy::default_instance_ = NULL;

Strategy* Strategy::New() const {
  return new Strategy;
}

void Strategy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    order_ = 0;
    if (has_ids()) {
      if (ids_ != &::google::protobuf::internal::kEmptyString) {
        ids_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
    if (has_condition()) {
      if (condition_ != &::google::protobuf::internal::kEmptyString) {
        condition_->clear();
      }
    }
    if (has_classtype()) {
      if (classtype_ != &::google::protobuf::internal::kEmptyString) {
        classtype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Strategy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "null"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // required int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ids;
        break;
      }

      // optional string ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ids().data(), this->ids().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // optional string desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_config;
        break;
      }

      // optional string config = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_condition;
        break;
      }

      // optional string condition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->condition().data(), this->condition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_classtype;
        break;
      }

      // optional string classtype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->classtype().data(), this->classtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Strategy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "null"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // optional string ids = 3;
  if (has_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ids().data(), this->ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ids(), output);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc(), output);
  }

  // optional string config = 5;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->config(), output);
  }

  // optional string condition = 6;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->condition(), output);
  }

  // optional string classtype = 7;
  if (has_classtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classtype().data(), this->classtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->classtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Strategy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "null"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  // optional string ids = 3;
  if (has_ids()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ids().data(), this->ids().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ids(), target);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // optional string config = 5;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->config(), target);
  }

  // optional string condition = 6;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->condition(), target);
  }

  // optional string classtype = 7;
  if (has_classtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->classtype().data(), this->classtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->classtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Strategy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "null"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional string ids = 3;
    if (has_ids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ids());
    }

    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string config = 5;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

    // optional string condition = 6;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->condition());
    }

    // optional string classtype = 7;
    if (has_classtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Strategy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Strategy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Strategy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Strategy::MergeFrom(const Strategy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_ids()) {
      set_ids(from.ids());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_classtype()) {
      set_classtype(from.classtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Strategy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Strategy::CopyFrom(const Strategy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Strategy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Strategy::Swap(Strategy* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(order_, other->order_);
    std::swap(ids_, other->ids_);
    std::swap(desc_, other->desc_);
    std::swap(config_, other->config_);
    std::swap(condition_, other->condition_);
    std::swap(classtype_, other->classtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Strategy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Strategy_descriptor_;
  metadata.reflection = Strategy_reflection_;
  return metadata;
}


// ===================================================================

::std::string* ModelGroup::_default_name_ = NULL;
#ifndef _MSC_VER
const int ModelGroup::kNameFieldNumber;
const int ModelGroup::kConditionFieldNumber;
const int ModelGroup::kFeatureFieldNumber;
const int ModelGroup::kExtractorFieldNumber;
const int ModelGroup::kModelFieldNumber;
const int ModelGroup::kStrategyFieldNumber;
#endif  // !_MSC_VER

ModelGroup::ModelGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelGroup::InitAsDefaultInstance() {
}

ModelGroup::ModelGroup(const ModelGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelGroup::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelGroup::~ModelGroup() {
  SharedDtor();
}

void ModelGroup::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ModelGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelGroup_descriptor_;
}

const ModelGroup& ModelGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Framework_2fgraph_2eproto();
  return *default_instance_;
}

ModelGroup* ModelGroup::default_instance_ = NULL;

ModelGroup* ModelGroup::New() const {
  return new ModelGroup;
}

void ModelGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
  }
  condition_.Clear();
  feature_.Clear();
  extractor_.Clear();
  model_.Clear();
  strategy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "root"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_condition;
        break;
      }

      // repeated .rank.graph.Condition condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_condition;
        if (input->ExpectTag(26)) goto parse_feature;
        break;
      }

      // repeated .rank.graph.Feature feature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_feature;
        if (input->ExpectTag(34)) goto parse_extractor;
        break;
      }

      // repeated .rank.graph.Extractor extractor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extractor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extractor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extractor;
        if (input->ExpectTag(42)) goto parse_model;
        break;
      }

      // repeated .rank.graph.Model model = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_model;
        if (input->ExpectTag(50)) goto parse_strategy;
        break;
      }

      // repeated .rank.graph.Strategy strategy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strategy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strategy;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "root"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .rank.graph.Condition condition = 2;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->condition(i), output);
  }

  // repeated .rank.graph.Feature feature = 3;
  for (int i = 0; i < this->feature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->feature(i), output);
  }

  // repeated .rank.graph.Extractor extractor = 4;
  for (int i = 0; i < this->extractor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extractor(i), output);
  }

  // repeated .rank.graph.Model model = 5;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->model(i), output);
  }

  // repeated .rank.graph.Strategy strategy = 6;
  for (int i = 0; i < this->strategy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->strategy(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "root"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .rank.graph.Condition condition = 2;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->condition(i), target);
  }

  // repeated .rank.graph.Feature feature = 3;
  for (int i = 0; i < this->feature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->feature(i), target);
  }

  // repeated .rank.graph.Extractor extractor = 4;
  for (int i = 0; i < this->extractor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extractor(i), target);
  }

  // repeated .rank.graph.Model model = 5;
  for (int i = 0; i < this->model_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->model(i), target);
  }

  // repeated .rank.graph.Strategy strategy = 6;
  for (int i = 0; i < this->strategy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->strategy(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "root"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .rank.graph.Condition condition = 2;
  total_size += 1 * this->condition_size();
  for (int i = 0; i < this->condition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->condition(i));
  }

  // repeated .rank.graph.Feature feature = 3;
  total_size += 1 * this->feature_size();
  for (int i = 0; i < this->feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feature(i));
  }

  // repeated .rank.graph.Extractor extractor = 4;
  total_size += 1 * this->extractor_size();
  for (int i = 0; i < this->extractor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extractor(i));
  }

  // repeated .rank.graph.Model model = 5;
  total_size += 1 * this->model_size();
  for (int i = 0; i < this->model_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model(i));
  }

  // repeated .rank.graph.Strategy strategy = 6;
  total_size += 1 * this->strategy_size();
  for (int i = 0; i < this->strategy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strategy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelGroup::MergeFrom(const ModelGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  condition_.MergeFrom(from.condition_);
  feature_.MergeFrom(from.feature_);
  extractor_.MergeFrom(from.extractor_);
  model_.MergeFrom(from.model_);
  strategy_.MergeFrom(from.strategy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelGroup::CopyFrom(const ModelGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < condition_size(); i++) {
    if (!this->condition(i).IsInitialized()) return false;
  }
  for (int i = 0; i < feature_size(); i++) {
    if (!this->feature(i).IsInitialized()) return false;
  }
  for (int i = 0; i < extractor_size(); i++) {
    if (!this->extractor(i).IsInitialized()) return false;
  }
  for (int i = 0; i < model_size(); i++) {
    if (!this->model(i).IsInitialized()) return false;
  }
  for (int i = 0; i < strategy_size(); i++) {
    if (!this->strategy(i).IsInitialized()) return false;
  }
  return true;
}

void ModelGroup::Swap(ModelGroup* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    condition_.Swap(&other->condition_);
    feature_.Swap(&other->feature_);
    extractor_.Swap(&other->extractor_);
    model_.Swap(&other->model_);
    strategy_.Swap(&other->strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelGroup_descriptor_;
  metadata.reflection = ModelGroup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph
}  // namespace rank

// @@protoc_insertion_point(global_scope)
